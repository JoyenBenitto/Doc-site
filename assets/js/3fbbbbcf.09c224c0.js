"use strict";(self.webpackChunkdoc_site=self.webpackChunkdoc_site||[]).push([[386],{7097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>l,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var i=n(5893),s=n(1151);const r={slug:"Memory-transfer-between-host-and-device",title:"Memory transfer between host and device",sidebar_position:8,authors:{name:"Joyen Benitto",title:"Memory transfer between host and device",url:"https://github.com/JoyenBenitto",image_url:"https://avatars.githubusercontent.com/u/75515758?v=4"},tags:["cuda","index"]},d=void 0,c={id:"CUDA101/Memory transfer between host and device",title:"Memory transfer between host and device",description:"- In CUDA we work with two devices on the host and the device, so we have host memory and the device memory.",source:"@site/docs/CUDA101/Memory transfer between host and device.md",sourceDirName:"CUDA101",slug:"/CUDA101/Memory-transfer-between-host-and-device",permalink:"/docs/CUDA101/Memory-transfer-between-host-and-device",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CUDA101/Memory transfer between host and device.md",tags:[{label:"cuda",permalink:"/docs/tags/cuda"},{label:"index",permalink:"/docs/tags/index"}],version:"current",sidebarPosition:8,frontMatter:{slug:"Memory-transfer-between-host-and-device",title:"Memory transfer between host and device",sidebar_position:8,authors:{name:"Joyen Benitto",title:"Memory transfer between host and device",url:"https://github.com/JoyenBenitto",image_url:"https://avatars.githubusercontent.com/u/75515758?v=4"},tags:["cuda","index"]},sidebar:"tutorialSidebar",previous:{title:"Unique index calculation part-2",permalink:"/docs/CUDA101/Unique_index-Part-2"},next:{title:"Device Properties",permalink:"/docs/CUDA101/Device-Properties"}},o={},a=[];function h(e){const t={code:"code",em:"em",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"In CUDA we work with two devices on the host and the device, so we have host memory and the device memory."}),"\n",(0,i.jsx)(t.li,{children:"GPU has its own memory hierarchy which is physically located in the GPU."}),"\n",(0,i.jsx)(t.li,{children:"So this is a perfect time to loop back to our discussion on what a generic CUDA program is like. We initialize the data then we have device execution and the host logic. we wait for the GPU to provide us the result."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"memory_model1.png",src:n(5399).Z+"",width:"881",height:"433"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"We can transfer the contents of the host and device using the below function."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"cudaMemCpy(destination ptr, sourse ptr, size in byte, direction)\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["The ",(0,i.jsx)(t.em,{children:"direction"})," can be one of the below:"]}),"\n"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Direction"}),(0,i.jsx)(t.th,{children:"Keyword"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Host to Device"}),(0,i.jsx)(t.td,{children:"#cudamemcpyhtod"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Device to Host"}),(0,i.jsx)(t.td,{children:"#cudamemcpydtoh"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Device to Device"}),(0,i.jsx)(t.td,{children:"#cudamemcpydtod"})]})]})]}),"\n",(0,i.jsx)(t.p,{children:"Let us understand memory transfer with a simple example."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Example1:"})," Let us transfer the elements from host to device and print the elements in the device."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include "cudaruntime.h"\n#include "device_launch_parameters.h"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <cstring.h>\n#include <time.h>\n\n__global__ void mem_trs_test(int * input){\n\tint gid = blockIdx.x * blockDim.x + threadIdx.x;\n\tprintf("tid: %d, gid : %d, value : %d \\n", threadIdx.x,gid,input[gid])\t\n}\n\nint main(){\n\tint size = 128;\n\tint byte_size = size * sizeof(int);\n\tint * h_input;\n\th_input = (int*)malloc(byte_size);\n\n\ttime_t t;\n\tsrand((unsigned)time(&t));\n\tfor(int i = 0; i < size; i++){\n\t\th_input[i] = (int)(rand() & 0xff);\n\t}\n\n\tint *d_input;\n\tcudaMalloc((void**)&d_inpout, byte_size);\n\n\tcudaMemcpu(d_inpout, h_input,byte_size,cudaMemcpyHostToDevice);\n\n\tdim3 block(64);\n\tdim3 grid(2);\n\n\tmem_trs_test <<<grid, block>>>(d_input);\n\tcudaDeviceSynchronize();\n\n\t//reclaiming the memory\n\tcudaFree(d_input);\n\tfree(h_input);\n\n\t\n\tcudaDeviceReset();\n\treturn 0;\n}\n\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"To perform Memory operation in the device CUDA API provides set of functions which has similar name as C counter parts."}),"\n"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"C"}),(0,i.jsx)(t.th,{children:"CUDA"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"#malloc"}),(0,i.jsx)(t.td,{children:"#cudaMalloc"}),(0,i.jsx)(t.td,{children:"Allocates the memory in the host and device"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"#memset"}),(0,i.jsx)(t.td,{children:"#cudaMemset"}),(0,i.jsx)(t.td,{children:"memset() sets values for given memory location and we have cudaMemset() function which performs same operation in the device"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"#free"}),(0,i.jsx)(t.td,{children:"#cudaFree"}),(0,i.jsx)(t.td,{children:"free() function reclaims specified memory location in the host and cudaFree() reclaims in the device"})]})]})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Usually for performance reasons we keep the #blocksize as multiples of 32."}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},5399:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/memory_model1-6d081798cc7b245579bd25472ca267a2.png"},1151:(e,t,n)=>{n.d(t,{Z:()=>c,a:()=>d});var i=n(7294);const s={},r=i.createContext(s);function d(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);